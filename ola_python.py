# -*- coding: utf-8 -*-
"""Ola_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TFXEQZakj8fe2wOtJM3NHWDV4qlM4QCp
"""

!pip install osmnx

import osmnx as ox

# Function to fetch coordinates of a station by name and city
def get_station_coords(station_name, city_name):
    # Construct the query string
    query = f'{station_name} Station, {city_name}'

    # Fetch data from OSM
    try:
        location = ox.geocode(query)
        return location
    except Exception as e:
        print(f"An error occurred for {query}: {e}")
        return None

# List of station names for a hypothetical Paris Metro network
station_coords_paris = [
    'Bastille',
    'République',
    'Nation',
    'Gare de Lyon',
    'Châtelet',
    'Trocadéro',
    'Montparnasse-Bienvenüe',
    'Charles de Gaulle - Étoile',
    'Gare du Nord',
    'Gare de l\'Est',
    'Montparnasse',
    'Denfert-Rochereau',
    'Gare d\'Austerlitz',
    'Gare Saint-Lazare',
    'Opéra'
]

# Use the function to build a dictionary of station coordinates for Paris
station_coords_paris = {station: get_station_coords(station, 'Paris, France') for station in station_coords_paris}

# Print the dictionary of gathered coordinates
print(station_coords_paris)

import networkx as nx
import matplotlib.pyplot as plt
from geopy.distance import great_circle

# Function to calculate the great-circle distance between two points
def calculate_distance(coord1, coord2):
    return great_circle(coord1, coord2).kilometers



# Define a hypothetical part of the Paris Métro system with 5 lines and some stations per line
paris_metro = {
    'Line 1': ['Montparnasse-Bienvenüe', 'Charles de Gaulle - Étoile', 'Châtelet', 'Gare de Lyon', 'Nation'],
    'Line 2': ['Porte Dauphine', 'Charles de Gaulle - Étoile', 'Nation', 'Père Lachaise', 'Belleville'],
    'Line 3': ['Pont de Levallois', 'Europe', 'Opéra', 'République', 'Gallieni'],
    'Line 4': ['Porte de Clignancourt', 'Gare du Nord', 'Châtelet', 'Montparnasse', 'Mairie de Montrouge'],
    'Line 6': ['Charles de Gaulle - Étoile', 'Trocadéro', 'Bir-Hakeim', 'Montparnasse', 'Nation']
}

# Define colors for each Paris Métro line
metro_colors = {
    'Line 1': 'yellow',
    'Line 2': 'blue',
    'Line 3': 'green',
    'Line 4': 'purple',
    'Line 6': 'orange'
}

# Initialize a graph
metro_graph = nx.Graph()

# Add nodes and edges to the graph for each Métro line
for line, stops in paris_metro.items():
    metro_graph.add_nodes_from(stops, line=line)
    for i in range(len(stops) - 1):
        stop1, stop2 = stops[i], stops[i + 1]
        if stop1 in station_coords_paris and stop2 in station_coords_paris:
            distance = calculate_distance(station_coords_paris[stop1], station_coords_paris[stop2])
            metro_graph.add_edge(stop1, stop2, line=line, distance=distance)

# Initialize a matplotlib figure
plt.figure(figsize=(15, 10))

# Plot each Métro line and annotate with distances
for line, stops in paris_metro.items():
    coords = [station_coords_paris[stop] for stop in stops if stop in station_coords_paris]
    xs, ys = zip(*coords)
    plt.plot(xs, ys, color=metro_colors[line], marker='o', linestyle='-', linewidth=2, markersize=8, label=f'{line}')

    # Annotate distances between stations
    for i in range(len(stops) - 1):
        stop1, stop2 = stops[i], stops[i + 1]
        if stop1 in station_coords_paris and stop2 in station_coords_paris:
            edge = metro_graph[stop1][stop2]
            mid_x = (station_coords_paris[stop1][0] + station_coords_paris[stop2][0]) / 2
            mid_y = (station_coords_paris[stop1][1] + station_coords_paris[stop2][1]) / 2
            plt.text(mid_x, mid_y, f"{edge['distance']:.1f} km", fontsize=9, color='black', ha='center')

# Add station names as labels
for stop, pos in station_coords_paris.items():
    plt.text(pos[0], pos[1], stop, fontsize=9, ha='right', va='bottom')

# Add a grid, background, and legend
plt.grid(True, linestyle='--', linewidth=1, color='grey')
plt.gca().set_facecolor('0.97')
plt.legend(loc='upper right', fontsize='small')

# Title and labels
plt.title("Paris Métro Network with Distances", fontsize=16)
plt.xlabel("Longitude", fontsize=12)
plt.ylabel("Latitude", fontsize=12)

# Adjust layout and show plot
plt.tight_layout()
plt.show()